"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
require("../../../../../pretty-format@27.5.1/node_modules/pretty-format/build/index.js");
const __viteBrowserExternal = require("../../../../../../../_virtual/__vite-browser-external.js");
const loupe$1 = require("../../../../../loupe@2.3.6/node_modules/loupe/loupe.js");
const SAFE_TIMERS_SYMBOL = Symbol("vitest:SAFE_TIMERS");
function getSafeTimers() {
  const {
    setTimeout: safeSetTimeout,
    setInterval: safeSetInterval,
    clearInterval: safeClearInterval,
    clearTimeout: safeClearTimeout
  } = globalThis[SAFE_TIMERS_SYMBOL] || globalThis;
  return {
    setTimeout: safeSetTimeout,
    setInterval: safeSetInterval,
    clearInterval: safeClearInterval,
    clearTimeout: safeClearTimeout
  };
}
const loupe = typeof loupe$1.default.default === "function" ? loupe$1.default.default : loupe$1.default;
function format(...args) {
  return __viteBrowserExternal.default.format(...args);
}
function inspect(obj) {
  return loupe(obj, {
    depth: 2,
    truncate: 40
  });
}
function objDisplay(obj) {
  const truncateThreshold = 40;
  const str = inspect(obj);
  const type = Object.prototype.toString.call(obj);
  if (str.length >= truncateThreshold) {
    if (type === "[object Function]") {
      const fn = obj;
      return !fn.name || fn.name === "" ? "[Function]" : `[Function: ${fn.name}]`;
    } else if (type === "[object Array]") {
      return `[ Array(${obj.length}) ]`;
    } else if (type === "[object Object]") {
      const keys = Object.keys(obj);
      const kstr = keys.length > 2 ? `${keys.splice(0, 2).join(", ")}, ...` : keys.join(", ");
      return `{ Object (${kstr}) }`;
    } else {
      return str;
    }
  }
  return str;
}
const colors = [
  "reset",
  "bold",
  "dim",
  "italic",
  "underline",
  "inverse",
  "hidden",
  "strikethrough",
  "black",
  "red",
  "green",
  "yellow",
  "blue",
  "magenta",
  "cyan",
  "white",
  "gray",
  "bgBlack",
  "bgRed",
  "bgGreen",
  "bgYellow",
  "bgBlue",
  "bgMagenta",
  "bgCyan",
  "bgWhite"
];
const formatter = (str) => String(str);
colors.reduce((acc, key) => {
  acc[key] = formatter;
  return acc;
}, { isColorSupported: false });
exports.SAFE_TIMERS_SYMBOL = SAFE_TIMERS_SYMBOL;
exports.format = format;
exports.getSafeTimers = getSafeTimers;
exports.inspect = inspect;
exports.objDisplay = objDisplay;
//# sourceMappingURL=index.js.map
