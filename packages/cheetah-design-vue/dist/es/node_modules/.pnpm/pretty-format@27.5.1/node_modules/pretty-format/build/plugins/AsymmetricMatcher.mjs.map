{"version":3,"file":"AsymmetricMatcher.mjs","sources":["../../../../../../../../../../../node_modules/.pnpm/pretty-format@27.5.1/node_modules/pretty-format/build/plugins/AsymmetricMatcher.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.test = exports.serialize = exports.default = void 0;\n\nvar _collections = require('../collections');\n\nvar global = (function () {\n  if (typeof globalThis !== 'undefined') {\n    return globalThis;\n  } else if (typeof global !== 'undefined') {\n    return global;\n  } else if (typeof self !== 'undefined') {\n    return self;\n  } else if (typeof window !== 'undefined') {\n    return window;\n  } else {\n    return Function('return this')();\n  }\n})();\n\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;\nconst asymmetricMatcher =\n  typeof Symbol === 'function' && Symbol.for\n    ? Symbol.for('jest.asymmetricMatcher')\n    : 0x1357a5;\nconst SPACE = ' ';\n\nconst serialize = (val, config, indentation, depth, refs, printer) => {\n  const stringedValue = val.toString();\n\n  if (\n    stringedValue === 'ArrayContaining' ||\n    stringedValue === 'ArrayNotContaining'\n  ) {\n    if (++depth > config.maxDepth) {\n      return '[' + stringedValue + ']';\n    }\n\n    return (\n      stringedValue +\n      SPACE +\n      '[' +\n      (0, _collections.printListItems)(\n        val.sample,\n        config,\n        indentation,\n        depth,\n        refs,\n        printer\n      ) +\n      ']'\n    );\n  }\n\n  if (\n    stringedValue === 'ObjectContaining' ||\n    stringedValue === 'ObjectNotContaining'\n  ) {\n    if (++depth > config.maxDepth) {\n      return '[' + stringedValue + ']';\n    }\n\n    return (\n      stringedValue +\n      SPACE +\n      '{' +\n      (0, _collections.printObjectProperties)(\n        val.sample,\n        config,\n        indentation,\n        depth,\n        refs,\n        printer\n      ) +\n      '}'\n    );\n  }\n\n  if (\n    stringedValue === 'StringMatching' ||\n    stringedValue === 'StringNotMatching'\n  ) {\n    return (\n      stringedValue +\n      SPACE +\n      printer(val.sample, config, indentation, depth, refs)\n    );\n  }\n\n  if (\n    stringedValue === 'StringContaining' ||\n    stringedValue === 'StringNotContaining'\n  ) {\n    return (\n      stringedValue +\n      SPACE +\n      printer(val.sample, config, indentation, depth, refs)\n    );\n  }\n\n  return val.toAsymmetricMatcher();\n};\n\nexports.serialize = serialize;\n\nconst test = val => val && val.$$typeof === asymmetricMatcher;\n\nexports.test = test;\nconst plugin = {\n  serialize,\n  test\n};\nvar _default = plugin;\nexports.default = _default;\n"],"names":["require$$0","Symbol"],"mappings":";;;AAEA,OAAO,eAAe,mBAAS,cAAc;AAAA,EAC3C,OAAO;AACT,CAAC;AACD,kBAAA,OAAgC,kBAAA,wCAAqB;AAErD,IAAI,eAAeA;AAEnB,IAAI,SAAU,WAAY;AACxB,MAAI,OAAO,eAAe,aAAa;AACrC,WAAO;AAAA,EACX,WAAa,OAAO,WAAW,aAAa;AACxC,WAAO;AAAA,EACX,WAAa,OAAO,SAAS,aAAa;AACtC,WAAO;AAAA,EACX,WAAa,OAAO,WAAW,aAAa;AACxC,WAAO;AAAA,EACX,OAAS;AACL,WAAO,SAAS,aAAa;EAC9B;AACH;AAEA,IAAIC,WAAS,OAAO,0BAA0B,KAAK,OAAO;AAC1D,MAAM,oBACJ,OAAOA,aAAW,cAAcA,SAAO,MACnCA,SAAO,IAAI,wBAAwB,IACnC;AACN,MAAM,QAAQ;AAEd,MAAM,YAAY,CAAC,KAAK,QAAQ,aAAa,OAAO,MAAM,YAAY;AACpE,QAAM,gBAAgB,IAAI;AAE1B,MACE,kBAAkB,qBAClB,kBAAkB,sBAClB;AACA,QAAI,EAAE,QAAQ,OAAO,UAAU;AAC7B,aAAO,MAAM,gBAAgB;AAAA,IAC9B;AAED,WACE,gBACA,QACA,OACA,GAAI,aAAa;AAAA,MACf,IAAI;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,IACD;AAAA,EAEH;AAED,MACE,kBAAkB,sBAClB,kBAAkB,uBAClB;AACA,QAAI,EAAE,QAAQ,OAAO,UAAU;AAC7B,aAAO,MAAM,gBAAgB;AAAA,IAC9B;AAED,WACE,gBACA,QACA,OACA,GAAI,aAAa;AAAA,MACf,IAAI;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,IACD;AAAA,EAEH;AAED,MACE,kBAAkB,oBAClB,kBAAkB,qBAClB;AACA,WACE,gBACA,QACA,QAAQ,IAAI,QAAQ,QAAQ,aAAa,OAAO,IAAI;AAAA,EAEvD;AAED,MACE,kBAAkB,sBAClB,kBAAkB,uBAClB;AACA,WACE,gBACA,QACA,QAAQ,IAAI,QAAQ,QAAQ,aAAa,OAAO,IAAI;AAAA,EAEvD;AAED,SAAO,IAAI;AACb;AAEiB,kBAAA,YAAG;AAEpB,MAAM,OAAO,SAAO,OAAO,IAAI,aAAa;AAEhC,kBAAA,OAAG;AACf,MAAM,SAAS;AAAA,EACb;AAAA,EACA;AACF;AACA,IAAI,WAAW;AACf,kBAAA,UAAkB;","x_google_ignoreList":[0]}