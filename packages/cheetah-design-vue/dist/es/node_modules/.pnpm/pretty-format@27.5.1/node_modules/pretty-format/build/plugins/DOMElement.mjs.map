{"version":3,"file":"DOMElement.mjs","sources":["../../../../../../../../../../../node_modules/.pnpm/pretty-format@27.5.1/node_modules/pretty-format/build/plugins/DOMElement.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.test = exports.serialize = exports.default = void 0;\n\nvar _markup = require('./lib/markup');\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst ELEMENT_NODE = 1;\nconst TEXT_NODE = 3;\nconst COMMENT_NODE = 8;\nconst FRAGMENT_NODE = 11;\nconst ELEMENT_REGEXP = /^((HTML|SVG)\\w*)?Element$/;\n\nconst testHasAttribute = val => {\n  try {\n    return typeof val.hasAttribute === 'function' && val.hasAttribute('is');\n  } catch {\n    return false;\n  }\n};\n\nconst testNode = val => {\n  const constructorName = val.constructor.name;\n  const {nodeType, tagName} = val;\n  const isCustomElement =\n    (typeof tagName === 'string' && tagName.includes('-')) ||\n    testHasAttribute(val);\n  return (\n    (nodeType === ELEMENT_NODE &&\n      (ELEMENT_REGEXP.test(constructorName) || isCustomElement)) ||\n    (nodeType === TEXT_NODE && constructorName === 'Text') ||\n    (nodeType === COMMENT_NODE && constructorName === 'Comment') ||\n    (nodeType === FRAGMENT_NODE && constructorName === 'DocumentFragment')\n  );\n};\n\nconst test = val => {\n  var _val$constructor;\n\n  return (\n    (val === null || val === void 0\n      ? void 0\n      : (_val$constructor = val.constructor) === null ||\n        _val$constructor === void 0\n      ? void 0\n      : _val$constructor.name) && testNode(val)\n  );\n};\n\nexports.test = test;\n\nfunction nodeIsText(node) {\n  return node.nodeType === TEXT_NODE;\n}\n\nfunction nodeIsComment(node) {\n  return node.nodeType === COMMENT_NODE;\n}\n\nfunction nodeIsFragment(node) {\n  return node.nodeType === FRAGMENT_NODE;\n}\n\nconst serialize = (node, config, indentation, depth, refs, printer) => {\n  if (nodeIsText(node)) {\n    return (0, _markup.printText)(node.data, config);\n  }\n\n  if (nodeIsComment(node)) {\n    return (0, _markup.printComment)(node.data, config);\n  }\n\n  const type = nodeIsFragment(node)\n    ? 'DocumentFragment'\n    : node.tagName.toLowerCase();\n\n  if (++depth > config.maxDepth) {\n    return (0, _markup.printElementAsLeaf)(type, config);\n  }\n\n  return (0, _markup.printElement)(\n    type,\n    (0, _markup.printProps)(\n      nodeIsFragment(node)\n        ? []\n        : Array.from(node.attributes)\n            .map(attr => attr.name)\n            .sort(),\n      nodeIsFragment(node)\n        ? {}\n        : Array.from(node.attributes).reduce((props, attribute) => {\n            props[attribute.name] = attribute.value;\n            return props;\n          }, {}),\n      config,\n      indentation + config.indent,\n      depth,\n      refs,\n      printer\n    ),\n    (0, _markup.printChildren)(\n      Array.prototype.slice.call(node.childNodes || node.children),\n      config,\n      indentation + config.indent,\n      depth,\n      refs,\n      printer\n    ),\n    config,\n    indentation\n  );\n};\n\nexports.serialize = serialize;\nconst plugin = {\n  serialize,\n  test\n};\nvar _default = plugin;\nexports.default = _default;\n"],"names":["require$$0"],"mappings":";;;AAEA,OAAO,eAAe,YAAS,cAAc;AAAA,EAC3C,OAAO;AACT,CAAC;AACD,WAAA,OAAgC,WAAA,iCAAqB;AAErD,IAAI,UAAUA;AAQd,MAAM,eAAe;AACrB,MAAM,YAAY;AAClB,MAAM,eAAe;AACrB,MAAM,gBAAgB;AACtB,MAAM,iBAAiB;AAEvB,MAAM,mBAAmB,SAAO;AAC9B,MAAI;AACF,WAAO,OAAO,IAAI,iBAAiB,cAAc,IAAI,aAAa,IAAI;AAAA,EAC1E,QAAU;AACN,WAAO;AAAA,EACR;AACH;AAEA,MAAM,WAAW,SAAO;AACtB,QAAM,kBAAkB,IAAI,YAAY;AACxC,QAAM,EAAC,UAAU,QAAO,IAAI;AAC5B,QAAM,kBACH,OAAO,YAAY,YAAY,QAAQ,SAAS,GAAG,KACpD,iBAAiB,GAAG;AACtB,SACG,aAAa,iBACX,eAAe,KAAK,eAAe,KAAK,oBAC1C,aAAa,aAAa,oBAAoB,UAC9C,aAAa,gBAAgB,oBAAoB,aACjD,aAAa,iBAAiB,oBAAoB;AAEvD;AAEA,MAAM,OAAO,SAAO;AAClB,MAAI;AAEJ,UACG,QAAQ,QAAQ,QAAQ,SACrB,UACC,mBAAmB,IAAI,iBAAiB,QACzC,qBAAqB,SACrB,SACA,iBAAiB,SAAS,SAAS,GAAG;AAE9C;AAEY,WAAA,OAAG;AAEf,SAAS,WAAW,MAAM;AACxB,SAAO,KAAK,aAAa;AAC3B;AAEA,SAAS,cAAc,MAAM;AAC3B,SAAO,KAAK,aAAa;AAC3B;AAEA,SAAS,eAAe,MAAM;AAC5B,SAAO,KAAK,aAAa;AAC3B;AAEA,MAAM,YAAY,CAAC,MAAM,QAAQ,aAAa,OAAO,MAAM,YAAY;AACrE,MAAI,WAAW,IAAI,GAAG;AACpB,YAAO,GAAI,QAAQ,WAAW,KAAK,MAAM,MAAM;AAAA,EAChD;AAED,MAAI,cAAc,IAAI,GAAG;AACvB,YAAO,GAAI,QAAQ,cAAc,KAAK,MAAM,MAAM;AAAA,EACnD;AAED,QAAM,OAAO,eAAe,IAAI,IAC5B,qBACA,KAAK,QAAQ;AAEjB,MAAI,EAAE,QAAQ,OAAO,UAAU;AAC7B,YAAW,GAAA,QAAQ,oBAAoB,MAAM,MAAM;AAAA,EACpD;AAED,UAAO,GAAI,QAAQ;AAAA,IACjB;AAAA,KACA,GAAI,QAAQ;AAAA,MACV,eAAe,IAAI,IACf,CAAE,IACF,MAAM,KAAK,KAAK,UAAU,EACvB,IAAI,UAAQ,KAAK,IAAI,EACrB,KAAM;AAAA,MACb,eAAe,IAAI,IACf,CAAE,IACF,MAAM,KAAK,KAAK,UAAU,EAAE,OAAO,CAAC,OAAO,cAAc;AACvD,cAAM,UAAU,IAAI,IAAI,UAAU;AAClC,eAAO;AAAA,MACR,GAAE,EAAE;AAAA,MACT;AAAA,MACA,cAAc,OAAO;AAAA,MACrB;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,KACD,GAAI,QAAQ;AAAA,MACV,MAAM,UAAU,MAAM,KAAK,KAAK,cAAc,KAAK,QAAQ;AAAA,MAC3D;AAAA,MACA,cAAc,OAAO;AAAA,MACrB;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,IACD;AAAA,IACA;AAAA,EACJ;AACA;AAEiB,WAAA,YAAG;AACpB,MAAM,SAAS;AAAA,EACb;AAAA,EACA;AACF;AACA,IAAI,WAAW;AACf,WAAA,UAAkB;","x_google_ignoreList":[0]}